{'8ebff2dd9c643b68ab352293b3dac402': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   '    def '
                                                   'all_states_one_move_deeper():\n'
                                                   '        global board\n'
                                                   '        last_states = '
                                                   'tree[-1]\n'
                                                   "        print('next move: "
                                                   "', len(tree))\n"
                                                   "        print('breadth is: "
                                                   "', "
                                                   "sum([len(k['next_states']) "
                                                   'for k in last_states]))\n'
                                                   "        print('board "
                                                   "states: ', len(states))\n"
                                                   '        next_states = []\n'
                                                   '        for s in '
                                                   'last_states:\n'
                                                   '            ns = '
                                                   "s['next_states']\n"
                                                   '            for state in '
                                                   'ns:\n'
                                                   '                state = '
                                                   "state['board']\n"
                                                   '                possbl_mov '
                                                   '= []\n'
                                                   '                for nr in '
                                                   'range(1, len(pieces) + '
                                                   '1):\n'
                                                   '                    # try '
                                                   'any direction:\n'
                                                   '                    for '
                                                   'dir in (1, 0), (-1, 0), '
                                                   '(0, 1), (0, -1):\n'
                                                   '                        '
                                                   'count = 0\n'
                                                   '                        '
                                                   'while True:\n'
                                                   '                            '
                                                   'board = '
                                                   'clone_state(state)\n'
                                                   '                            '
                                                   'register_pieces()\n'
                                                   '                            '
                                                   'p = pieces[nr]\n'
                                                   '                            '
                                                   'count += 1\n'
                                                   '                            '
                                                   'r = p.move(dir[0], dir[1], '
                                                   'count)\n'
                                                   '                            '
                                                   'if r == None:\n'
                                                   '                                '
                                                   'break\n'
                                                   '                            '
                                                   'if r == False:\n'
                                                   '                                '
                                                   'continue\n'
                                                   '                            '
                                                   'check_solved(state, nr)\n'
                                                   '                            '
                                                   'possbl_mov.append(\n'
                                                   '                                '
                                                   "{'board': "
                                                   "clone_state(board), 'nr': "
                                                   "nr, 'count': count}\n"
                                                   '                            '
                                                   ')\n'
                                                   '    \n'
                                                   '                if '
                                                   'possbl_mov:\n'
                                                   '                    '
                                                   "next_states.append({'next_states': "
                                                   "possbl_mov, 'prev': "
                                                   'state})\n'
                                                   '        if next_states:\n'
                                                   '            '
                                                   'tree.append(next_states)\n'
                                                   '        else:\n'
                                                   "            print('no "
                                                   "solution')\n"
                                                   '            sys.exit(1)\n'
                                                   '    \n'
                                                   '    \n'
                                                   '    def main():\n'
                                                   "        print('Start "
                                                   "State:')\n"
                                                   '        print_board()\n'
                                                   '        register_pieces()\n'
                                                   '        have_new_state()  '
                                                   '# register initial state\n'
                                                   '        '
                                                   "tree.append([{'prev': "
                                                   "None, 'next_states': "
                                                   "[{'board': board, 'nr': "
                                                   '0}]}])\n'
                                                   '        while True:\n'
                                                   '            '
                                                   'all_states_one_move_deeper()\n'
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/klotski.py#L299)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/klotski.py#L299\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             '    def '
                                             'all_states_one_move_deeper():\n'
                                             '        global board\n'
                                             '        last_states = tree[-1]\n'
                                             "        print('next move: ', "
                                             'len(tree))\n'
                                             "        print('breadth is: ', "
                                             "sum([len(k['next_states']) for k "
                                             'in last_states]))\n'
                                             "        print('board states: ', "
                                             'len(states))\n'
                                             '        next_states = []\n'
                                             '        for s in last_states:\n'
                                             '            ns = '
                                             "s['next_states']\n"
                                             '            for state in ns:\n'
                                             '                state = '
                                             "state['board']\n"
                                             '                possbl_mov = []\n'
                                             '                for nr in '
                                             'range(1, len(pieces) + 1):\n'
                                             '                    # try any '
                                             'direction:\n'
                                             '                    for dir in '
                                             '(1, 0), (-1, 0), (0, 1), (0, '
                                             '-1):\n'
                                             '                        count = '
                                             '0\n'
                                             '                        while '
                                             'True:\n'
                                             '                            '
                                             'board = clone_state(state)\n'
                                             '                            '
                                             'register_pieces()\n'
                                             '                            p = '
                                             'pieces[nr]\n'
                                             '                            '
                                             'count += 1\n'
                                             '                            r = '
                                             'p.move(dir[0], dir[1], count)\n'
                                             '                            if r '
                                             '== None:\n'
                                             '                                '
                                             'break\n'
                                             '                            if r '
                                             '== False:\n'
                                             '                                '
                                             'continue\n'
                                             '                            '
                                             'check_solved(state, nr)\n'
                                             '                            '
                                             'possbl_mov.append(\n'
                                             '                                '
                                             "{'board': clone_state(board), "
                                             "'nr': nr, 'count': count}\n"
                                             '                            )\n'
                                             '    \n'
                                             '                if possbl_mov:\n'
                                             '                    '
                                             "next_states.append({'next_states': "
                                             "possbl_mov, 'prev': state})\n"
                                             '        if next_states:\n'
                                             '            '
                                             'tree.append(next_states)\n'
                                             '        else:\n'
                                             "            print('no "
                                             "solution')\n"
                                             '            sys.exit(1)\n'
                                             '    \n'
                                             '    \n'
                                             '    def main():\n'
                                             "        print('Start State:')\n"
                                             '        print_board()\n'
                                             '        register_pieces()\n'
                                             '        have_new_state()  # '
                                             'register initial state\n'
                                             "        tree.append([{'prev': "
                                             "None, 'next_states': [{'board': "
                                             "board, 'nr': 0}]}])\n"
                                             '        while True:\n'
                                             '            '
                                             'all_states_one_move_deeper()\n'
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/klotski.py#L299)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/klotski.py#L299\n'},
 '98659c828522386aca769aeae4fba767': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   '    def '
                                                   'all_states_one_move_deeper():\n'
                                                   '        global board\n'
                                                   '        last_states = '
                                                   'tree[-1]\n'
                                                   "        print('next move: "
                                                   "', len(tree))\n"
                                                   "        print('breadth is: "
                                                   "', len(last_states))\n"
                                                   '        next_states = []\n'
                                                   '        for s in '
                                                   'last_states:\n'
                                                   '            ns = '
                                                   "s['next_states']\n"
                                                   '            for state in '
                                                   'ns:\n'
                                                   '                state = '
                                                   "state['board']\n"
                                                   '                possbl_mov '
                                                   '= []\n'
                                                   '                for nr in '
                                                   'range(1, len(pieces) + '
                                                   '1):\n'
                                                   '                    board '
                                                   '= clone_state(state)\n'
                                                   '                    '
                                                   'register_pieces()\n'
                                                   '                    p = '
                                                   'pieces[nr]\n'
                                                   '                    r = '
                                                   'p.go_left_if_new_state()\n'
                                                   '                    if r:\n'
                                                   '                        '
                                                   "possbl_mov.append({'board': "
                                                   "clone_state(board), 'nr': "
                                                   'nr})\n'
                                                   '                        '
                                                   'check_solved(state)\n'
                                                   '                    board '
                                                   '= clone_state(state)\n'
                                                   '                    '
                                                   'register_pieces()\n'
                                                   '                    p = '
                                                   'pieces[nr]\n'
                                                   '                    r = '
                                                   'p.go_right_if_new_state()\n'
                                                   '                    if r:\n'
                                                   '                        '
                                                   "possbl_mov.append({'board': "
                                                   "clone_state(board), 'nr': "
                                                   'nr})\n'
                                                   '                        '
                                                   'check_solved(state)\n'
                                                   '                if '
                                                   'possbl_mov:\n'
                                                   '                    '
                                                   "next_states.append({'next_states': "
                                                   "possbl_mov, 'prev': "
                                                   'state})\n'
                                                   '        if next_states:\n'
                                                   '            '
                                                   'tree.append(next_states)\n'
                                                   '        else:\n'
                                                   "            print('no "
                                                   "solution')\n"
                                                   '            sys.exit(1)\n'
                                                   '    \n'
                                                   '    \n'
                                                   '    def main():\n'
                                                   "        print('Start "
                                                   "State:')\n"
                                                   '        print_board()\n'
                                                   '        register_pieces()\n'
                                                   '        '
                                                   "tree.append([{'prev': "
                                                   "None, 'next_states': "
                                                   "[{'board': board, 'nr': "
                                                   '0}]}])\n'
                                                   '        while True:\n'
                                                   '            '
                                                   'all_states_one_move_deeper()\n'
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L341)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L341\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             '    def '
                                             'all_states_one_move_deeper():\n'
                                             '        global board\n'
                                             '        last_states = tree[-1]\n'
                                             "        print('next move: ', "
                                             'len(tree))\n'
                                             "        print('breadth is: ', "
                                             'len(last_states))\n'
                                             '        next_states = []\n'
                                             '        for s in last_states:\n'
                                             '            ns = '
                                             "s['next_states']\n"
                                             '            for state in ns:\n'
                                             '                state = '
                                             "state['board']\n"
                                             '                possbl_mov = []\n'
                                             '                for nr in '
                                             'range(1, len(pieces) + 1):\n'
                                             '                    board = '
                                             'clone_state(state)\n'
                                             '                    '
                                             'register_pieces()\n'
                                             '                    p = '
                                             'pieces[nr]\n'
                                             '                    r = '
                                             'p.go_left_if_new_state()\n'
                                             '                    if r:\n'
                                             '                        '
                                             "possbl_mov.append({'board': "
                                             "clone_state(board), 'nr': nr})\n"
                                             '                        '
                                             'check_solved(state)\n'
                                             '                    board = '
                                             'clone_state(state)\n'
                                             '                    '
                                             'register_pieces()\n'
                                             '                    p = '
                                             'pieces[nr]\n'
                                             '                    r = '
                                             'p.go_right_if_new_state()\n'
                                             '                    if r:\n'
                                             '                        '
                                             "possbl_mov.append({'board': "
                                             "clone_state(board), 'nr': nr})\n"
                                             '                        '
                                             'check_solved(state)\n'
                                             '                if possbl_mov:\n'
                                             '                    '
                                             "next_states.append({'next_states': "
                                             "possbl_mov, 'prev': state})\n"
                                             '        if next_states:\n'
                                             '            '
                                             'tree.append(next_states)\n'
                                             '        else:\n'
                                             "            print('no "
                                             "solution')\n"
                                             '            sys.exit(1)\n'
                                             '    \n'
                                             '    \n'
                                             '    def main():\n'
                                             "        print('Start State:')\n"
                                             '        print_board()\n'
                                             '        register_pieces()\n'
                                             "        tree.append([{'prev': "
                                             "None, 'next_states': [{'board': "
                                             "board, 'nr': 0}]}])\n"
                                             '        while True:\n'
                                             '            '
                                             'all_states_one_move_deeper()\n'
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L341)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L341\n'},
 'a5c7efc3d692d2b37845328273ca7751': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   '    def next_move():\n'
                                                   '        for nr in range(1, '
                                                   'len(pieces) + 1):\n'
                                                   '            p = '
                                                   'pieces[nr]\n'
                                                   '            # print(p)\n'
                                                   '            if '
                                                   'p.go_left_if_new_state() '
                                                   'or '
                                                   'p.go_right_if_new_state():\n'
                                                   '                return '
                                                   'True\n'
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L323)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L323\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             '    def next_move():\n'
                                             '        for nr in range(1, '
                                             'len(pieces) + 1):\n'
                                             '            p = pieces[nr]\n'
                                             '            # print(p)\n'
                                             '            if '
                                             'p.go_left_if_new_state() or '
                                             'p.go_right_if_new_state():\n'
                                             '                return True\n'
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L323)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L323\n'},
 'a8f8c165a4305a68d307fcba3d1082fa': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   '    def '
                                                   'all_states_one_move_deeper():\n'
                                                   '        global board\n'
                                                   '        last_states = '
                                                   'tree[-1]\n'
                                                   "        print('next move: "
                                                   "', len(tree))\n"
                                                   "        print('breadth is: "
                                                   "', "
                                                   "sum([len(k['next_states']) "
                                                   'for k in last_states]))\n'
                                                   '        next_states = []\n'
                                                   '        for s in '
                                                   'last_states:\n'
                                                   '            ns = '
                                                   "s['next_states']\n"
                                                   '            for state in '
                                                   'ns:\n'
                                                   '                state = '
                                                   "state['board']\n"
                                                   '                possbl_mov '
                                                   '= []\n'
                                                   '                for nr in '
                                                   'range(1, len(pieces) + '
                                                   '1):\n'
                                                   '                    # if '
                                                   'not nr in (12,): continue\n'
                                                   '                    for '
                                                   'dir in '
                                                   "'go_left_if_new_state', "
                                                   "'go_right_if_new_state':\n"
                                                   '                        '
                                                   'count = 0\n'
                                                   '                        '
                                                   'while True:\n'
                                                   '                            '
                                                   'board = '
                                                   'clone_state(state)\n'
                                                   '                            '
                                                   'register_pieces()\n'
                                                   '                            '
                                                   'p = pieces[nr]\n'
                                                   '                            '
                                                   'count += 1\n'
                                                   '                            '
                                                   'mv = getattr(p, dir)\n'
                                                   '                            '
                                                   'r = mv(count)\n'
                                                   '                            '
                                                   'if r == None:\n'
                                                   '                                '
                                                   'break\n'
                                                   '                            '
                                                   'if r == False:\n'
                                                   '                                '
                                                   'continue\n'
                                                   '                            '
                                                   'check_solved(state, nr)\n'
                                                   '                            '
                                                   'possbl_mov.append(\n'
                                                   '                                '
                                                   "{'board': "
                                                   "clone_state(board), 'nr': "
                                                   "nr, 'count': count}\n"
                                                   '                            '
                                                   ')\n'
                                                   '    \n'
                                                   '                if '
                                                   'possbl_mov:\n'
                                                   '                    '
                                                   "next_states.append({'next_states': "
                                                   "possbl_mov, 'prev': "
                                                   'state})\n'
                                                   '        if next_states:\n'
                                                   '            '
                                                   'tree.append(next_states)\n'
                                                   '        else:\n'
                                                   "            print('no "
                                                   "solution')\n"
                                                   '            sys.exit(1)\n'
                                                   '    \n'
                                                   '    \n'
                                                   '    def main():\n'
                                                   "        print('Start "
                                                   "State:')\n"
                                                   '        print_board()\n'
                                                   '        register_pieces()\n'
                                                   '        have_new_state()  '
                                                   '# register initial state\n'
                                                   '        '
                                                   "tree.append([{'prev': "
                                                   "None, 'next_states': "
                                                   "[{'board': board, 'nr': "
                                                   '0}]}])\n'
                                                   '        while True:\n'
                                                   '            '
                                                   'all_states_one_move_deeper()\n'
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme.py#L366)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme.py#L366\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             '    def '
                                             'all_states_one_move_deeper():\n'
                                             '        global board\n'
                                             '        last_states = tree[-1]\n'
                                             "        print('next move: ', "
                                             'len(tree))\n'
                                             "        print('breadth is: ', "
                                             "sum([len(k['next_states']) for k "
                                             'in last_states]))\n'
                                             '        next_states = []\n'
                                             '        for s in last_states:\n'
                                             '            ns = '
                                             "s['next_states']\n"
                                             '            for state in ns:\n'
                                             '                state = '
                                             "state['board']\n"
                                             '                possbl_mov = []\n'
                                             '                for nr in '
                                             'range(1, len(pieces) + 1):\n'
                                             '                    # if not nr '
                                             'in (12,): continue\n'
                                             '                    for dir in '
                                             "'go_left_if_new_state', "
                                             "'go_right_if_new_state':\n"
                                             '                        count = '
                                             '0\n'
                                             '                        while '
                                             'True:\n'
                                             '                            '
                                             'board = clone_state(state)\n'
                                             '                            '
                                             'register_pieces()\n'
                                             '                            p = '
                                             'pieces[nr]\n'
                                             '                            '
                                             'count += 1\n'
                                             '                            mv = '
                                             'getattr(p, dir)\n'
                                             '                            r = '
                                             'mv(count)\n'
                                             '                            if r '
                                             '== None:\n'
                                             '                                '
                                             'break\n'
                                             '                            if r '
                                             '== False:\n'
                                             '                                '
                                             'continue\n'
                                             '                            '
                                             'check_solved(state, nr)\n'
                                             '                            '
                                             'possbl_mov.append(\n'
                                             '                                '
                                             "{'board': clone_state(board), "
                                             "'nr': nr, 'count': count}\n"
                                             '                            )\n'
                                             '    \n'
                                             '                if possbl_mov:\n'
                                             '                    '
                                             "next_states.append({'next_states': "
                                             "possbl_mov, 'prev': state})\n"
                                             '        if next_states:\n'
                                             '            '
                                             'tree.append(next_states)\n'
                                             '        else:\n'
                                             "            print('no "
                                             "solution')\n"
                                             '            sys.exit(1)\n'
                                             '    \n'
                                             '    \n'
                                             '    def main():\n'
                                             "        print('Start State:')\n"
                                             '        print_board()\n'
                                             '        register_pieces()\n'
                                             '        have_new_state()  # '
                                             'register initial state\n'
                                             "        tree.append([{'prev': "
                                             "None, 'next_states': [{'board': "
                                             "board, 'nr': 0}]}])\n"
                                             '        while True:\n'
                                             '            '
                                             'all_states_one_move_deeper()\n'
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme.py#L366)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme.py#L366\n'},
 'abd08ac17a8f324016934c18ec8e7733': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   "    print('Start State:')\n"
                                                   '    print_board()\n'
                                                   '    register_pieces()\n'
                                                   '    have_new_state()  # '
                                                   'indexes the initial state\n'
                                                   '    while True:\n'
                                                   '        check_solved()\n'
                                                   '        if not '
                                                   'next_move():\n'
                                                   '            # when this is '
                                                   'False we have x, -x as the '
                                                   'last 2 moves (indicating '
                                                   'taking\n'
                                                   '            # back the '
                                                   'last move did not lead to '
                                                   'new states) -> we then '
                                                   'remove those 2,\n'
                                                   '            # so we take '
                                                   'back the last but one move '
                                                   '- until we have new state '
                                                   'again:\n'
                                                   '            while not '
                                                   'take_last_move_back():\n'
                                                   '                '
                                                   'moves.pop()\n'
                                                   '                '
                                                   'moves.pop()\n'
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L355)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L355\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             "    print('Start State:')\n"
                                             '    print_board()\n'
                                             '    register_pieces()\n'
                                             '    have_new_state()  # indexes '
                                             'the initial state\n'
                                             '    while True:\n'
                                             '        check_solved()\n'
                                             '        if not next_move():\n'
                                             '            # when this is False '
                                             'we have x, -x as the last 2 '
                                             'moves (indicating taking\n'
                                             '            # back the last move '
                                             'did not lead to new states) -> '
                                             'we then remove those 2,\n'
                                             '            # so we take back '
                                             'the last but one move - until we '
                                             'have new state again:\n'
                                             '            while not '
                                             'take_last_move_back():\n'
                                             '                moves.pop()\n'
                                             '                moves.pop()\n'
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L355)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L355\n'},
 'b93c07960ae8a069ab61f9cf17d88e33': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   '    def '
                                                   'print_solution(prev, '
                                                   'sec):\n'
                                                   '        move_nr = '
                                                   'len(tree) + 1\n'
                                                   '        old_piece = -1\n'
                                                   '        nr_moves = '
                                                   'len(tree)\n'
                                                   '        while tree:\n'
                                                   '            move_nr -= 1\n'
                                                   '            moves = '
                                                   'tree.pop()\n'
                                                   '            try:\n'
                                                   '                for move '
                                                   'in moves:\n'
                                                   '                    ns = '
                                                   "move['next_states']\n"
                                                   '                    for '
                                                   'state in ns:\n'
                                                   '                        if '
                                                   "state['board'] == prev:\n"
                                                   '                            '
                                                   "piece = state['nr']\n"
                                                   '                            '
                                                   'if piece == old_piece:\n'
                                                   '                                '
                                                   '# a piece is moved over > '
                                                   '1 cells, this counts as '
                                                   'ONE move:\n'
                                                   '                                '
                                                   '# adding 1 will result in '
                                                   'us reporting one move less '
                                                   'then:\n'
                                                   '                                '
                                                   'move_nr += 1\n'
                                                   '                            '
                                                   "print('move ', move_nr, "
                                                   'piece)\n'
                                                   '                            '
                                                   'print_board(prev, piece)\n'
                                                   '                            '
                                                   "prev = move['prev']\n"
                                                   '                            '
                                                   'old_piece = piece\n'
                                                   '                            '
                                                   'raise\n'
                                                   "                print('No "
                                                   "solution found')\n"
                                                   '                '
                                                   'sys.exit(1)\n'
                                                   '            except:\n'
                                                   '                pass\n'
                                                   '        lmoves = nr_moves '
                                                   '- move_nr\n'
                                                   '        lstates = '
                                                   'len(states)\n'
                                                   "        print(f'Solved in "
                                                   '{lmoves} moves (producing '
                                                   '{lstates} States). Took '
                                                   "{sec}sec.')\n"
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L307)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L307\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             '    def print_solution(prev, '
                                             'sec):\n'
                                             '        move_nr = len(tree) + 1\n'
                                             '        old_piece = -1\n'
                                             '        nr_moves = len(tree)\n'
                                             '        while tree:\n'
                                             '            move_nr -= 1\n'
                                             '            moves = tree.pop()\n'
                                             '            try:\n'
                                             '                for move in '
                                             'moves:\n'
                                             '                    ns = '
                                             "move['next_states']\n"
                                             '                    for state in '
                                             'ns:\n'
                                             '                        if '
                                             "state['board'] == prev:\n"
                                             '                            '
                                             "piece = state['nr']\n"
                                             '                            if '
                                             'piece == old_piece:\n'
                                             '                                '
                                             '# a piece is moved over > 1 '
                                             'cells, this counts as ONE move:\n'
                                             '                                '
                                             '# adding 1 will result in us '
                                             'reporting one move less then:\n'
                                             '                                '
                                             'move_nr += 1\n'
                                             '                            '
                                             "print('move ', move_nr, piece)\n"
                                             '                            '
                                             'print_board(prev, piece)\n'
                                             '                            prev '
                                             "= move['prev']\n"
                                             '                            '
                                             'old_piece = piece\n'
                                             '                            '
                                             'raise\n'
                                             "                print('No "
                                             "solution found')\n"
                                             '                sys.exit(1)\n'
                                             '            except:\n'
                                             '                pass\n'
                                             '        lmoves = nr_moves - '
                                             'move_nr\n'
                                             '        lstates = len(states)\n'
                                             "        print(f'Solved in "
                                             '{lmoves} moves (producing '
                                             '{lstates} States). Took '
                                             "{sec}sec.')\n"
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L307)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_breadth_first_single_moves.py#L307\n'},
 'beeba2c60983a2271d56e79390b4e74b': {'formatted': '\n'
                                                   '=== "Code"\n'
                                                   '\n'
                                                   '    ```python\n'
                                                   '    def calc_state():\n'
                                                   '        """get a unique id '
                                                   'per board(=pieces) '
                                                   'state"""\n'
                                                   "        s = ''\n"
                                                   '        for nr in range(1, '
                                                   'len(pieces) + 1):\n'
                                                   '            p = '
                                                   'pieces[nr]\n'
                                                   '            row, col = '
                                                   'p.row, p.col\n'
                                                   '            s += '
                                                   "f'{nr}{row}{col}:'\n"
                                                   '            # if nr == 5 '
                                                   'and row == 2: '
                                                   'breakpoint()  # FIXME '
                                                   'BREAKPOINT\n'
                                                   '        return s\n'
                                                   '    \n'
                                                   '    \n'
                                                   '    def have_new_state():\n'
                                                   '        s = calc_state()\n'
                                                   '        if not s in '
                                                   'states:\n'
                                                   '            states.add(s)\n'
                                                   '            return True\n'
                                                   '    ```\n'
                                                   '\n'
                                                   '=== '
                                                   '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L286)"\n'
                                                   '    '
                                                   'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L286\n',
                                      'res': '\n'
                                             '=== "Code"\n'
                                             '\n'
                                             '    ```python\n'
                                             '    def calc_state():\n'
                                             '        """get a unique id per '
                                             'board(=pieces) state"""\n'
                                             "        s = ''\n"
                                             '        for nr in range(1, '
                                             'len(pieces) + 1):\n'
                                             '            p = pieces[nr]\n'
                                             '            row, col = p.row, '
                                             'p.col\n'
                                             '            s += '
                                             "f'{nr}{row}{col}:'\n"
                                             '            # if nr == 5 and row '
                                             '== 2: breakpoint()  # FIXME '
                                             'BREAKPOINT\n'
                                             '        return s\n'
                                             '    \n'
                                             '    \n'
                                             '    def have_new_state():\n'
                                             '        s = calc_state()\n'
                                             '        if not s in states:\n'
                                             '            states.add(s)\n'
                                             '            return True\n'
                                             '    ```\n'
                                             '\n'
                                             '=== '
                                             '"[:fontawesome-brands-git-alt:](https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L286)"\n'
                                             '    '
                                             'https://github.com/AXGKl/blog/blob/master/docs/ll/fun/unblockme/unblockme_deep.py#L286\n'}}