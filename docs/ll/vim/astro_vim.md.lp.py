{'73c02eb6f6524b1bab84ccaa733260d2': {'cmd': '$ cat '
                                             '/home/gk/.config/nvim.personal/init.lua',
                                      'res': '-- '
                                             'https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#super-tab-like-mapping\n'
                                             '--\n'
                                             'local cmp_setup = function()\n'
                                             '\tlocal _, cmp = pcall(require, '
                                             '"cmp")\n'
                                             '\tlocal _, luasnip = '
                                             'pcall(require, "luasnip")\n'
                                             '\tlocal has_words_before = '
                                             'function()\n'
                                             '\t\tlocal line, col = '
                                             'unpack(vim.api.nvim_win_get_cursor(0))\n'
                                             '\t\tlocal lines = '
                                             'vim.api.nvim_buf_get_lines\n'
                                             '\t\treturn col ~= 0 and lines(0, '
                                             'line - 1, line, '
                                             'true)[1]:sub(col, '
                                             'col):match("%s") == nil\n'
                                             '\tend\n'
                                             '\treturn {\n'
                                             '\t\tmapping = {\n'
                                             '\t\t\t["<Tab>"] = '
                                             'cmp.mapping(function(fallback)\n'
                                             '\t\t\t\tif cmp.visible() then\n'
                                             '\t\t\t\t\t'
                                             'cmp.select_next_item()\n'
                                             '\t\t\t\telseif '
                                             'luasnip.expand_or_jumpable() '
                                             'then\n'
                                             '\t\t\t\t\t'
                                             'luasnip.expand_or_jump()\n'
                                             '\t\t\t\telseif '
                                             'has_words_before() then\n'
                                             '\t\t\t\t\tcmp.complete()\n'
                                             '\t\t\t\telse\n'
                                             '\t\t\t\t\tfallback()\n'
                                             '\t\t\t\tend\n'
                                             '\t\t\tend, { "i", "s" }),\n'
                                             '\n'
                                             '\t\t\t["<S-Tab>"] = '
                                             'cmp.mapping(function(fallback)\n'
                                             '\t\t\t\tif cmp.visible() then\n'
                                             '\t\t\t\t\t'
                                             'cmp.select_prev_item()\n'
                                             '\t\t\t\telseif '
                                             'luasnip.jumpable(-1) then\n'
                                             '\t\t\t\t\tluasnip.jump(-1)\n'
                                             '\t\t\t\telse\n'
                                             '\t\t\t\t\tfallback()\n'
                                             '\t\t\t\tend\n'
                                             '\t\t\tend, { "i", "s" }),\n'
                                             '\t\t},\n'
                                             '\t}\n'
                                             'end\n'
                                             '\n'
                                             'local config = {\n'
                                             '\n'
                                             '\t-- Set colorscheme\n'
                                             '\t-- colorscheme = '
                                             '"default_theme",\n'
                                             '\tcolorscheme = "kanagawa",\n'
                                             '\n'
                                             '\t-- Default theme '
                                             'configuration\n'
                                             '\tdefault_theme = {\n'
                                             '\t\tdiagnostics_style = "none",\n'
                                             '\t\t-- Modify the color table\n'
                                             '\t\tcolors = { fg = "#abb2bf" '
                                             '},\n'
                                             '\t\t-- Modify the highlight '
                                             'groups\n'
                                             '\t\thighlights = '
                                             'function(highlights)\n'
                                             '\t\t\tlocal C = '
                                             'require("default_theme.colors")\n'
                                             '\n'
                                             '\t\t\thighlights.Normal = { fg = '
                                             'C.fg, bg = C.bg }\n'
                                             '\t\t\treturn highlights\n'
                                             '\t\tend,\n'
                                             '\t},\n'
                                             '\n'
                                             '\t-- Disable default plugins\n'
                                             '\tenabled = {\n'
                                             '\t\tbufferline = true,\n'
                                             '\t\tnvim_tree = true,\n'
                                             '\t\tlualine = true,\n'
                                             '\t\tlspsaga = true,\n'
                                             '\t\tgitsigns = true,\n'
                                             '\t\tcolorizer = true,\n'
                                             '\t\ttoggle_term = true,\n'
                                             '\t\tcomment = true,\n'
                                             '\t\tsymbols_outline = true,\n'
                                             '\t\tindent_blankline = true,\n'
                                             '\t\tdashboard = true,\n'
                                             '\t\twhich_key = true,\n'
                                             '\t\tneoscroll = true,\n'
                                             '\t\tts_rainbow = true,\n'
                                             '\t\tts_autotag = true,\n'
                                             '\t},\n'
                                             '\tplugins = {\n'
                                             '\t\tcmp = cmp_setup(),\n'
                                             '\t\tinit = {\n'
                                             '\t\t\t'
                                             '"ThePrimeagen/refactoring.nvim",\n'
                                             '\t\t\t'
                                             '"arcticicestudio/nord-vim",\n'
                                             '\t\t\t"godlygeek/tabular",\n'
                                             '\t\t\t'
                                             '"iamcco/markdown-preview.nvim",\n'
                                             '\t\t\t"kdheepak/lazygit.nvim",\n'
                                             '\t\t\t"matsuuu/pinkmare",\n'
                                             '\t\t\t"rebelot/kanagawa.nvim",\n'
                                             '\t\t\t"tpope/vim-repeat",\n'
                                             '\t\t\t"tpope/vim-surround",\n'
                                             '\t\t\t"voldikss/vim-floaterm",\n'
                                             '\t\t\t'
                                             '"rafamadriz/friendly-snippets",\n'
                                             '\t\t\t{\n'
                                             '\t\t\t\t'
                                             '"uga-rosa/cmp-dictionary",\n'
                                             '\t\t\t\tafter = "nvim-cmp",\n'
                                             '\t\t\t\tconfig = function()\n'
                                             '\t\t\t\t\tlocal cmp = '
                                             'require("cmp")\n'
                                             '\t\t\t\t\tlocal config = '
                                             'cmp.get_config()\n'
                                             '\t\t\t\t\t'
                                             'table.insert(config.sources, { '
                                             'name = "dictionary", '
                                             'keyword_length = 2 })\n'
                                             '\t\t\t\t\tcmp.setup(config)\n'
                                             '\t\t\t\tend,\n'
                                             '\t\t'
                                             'require("cmp_dictionary").setup({\n'
                                             '\t\t\tdic = {\n'
                                             '\t\t\t\t["markdown"] = { '
                                             '"/home/gk/.config/nvim.personal/10k.txt" '
                                             '},\n'
                                             '\t\t\t\t--["markdown"] = { '
                                             '"/usr/share/dict/words" },\n'
                                             '\t\t\t\t-- ["lua"] = '
                                             '"path/to/lua.dic",\n'
                                             '\t\t\t\t-- '
                                             '["javascript,typescript"] = { '
                                             '"path/to/js.dic", '
                                             '"path/to/js2.dic" },\n'
                                             '\t\t\t\t-- filename = {\n'
                                             '\t\t\t\t-- \t["xmake.lua"] = { '
                                             '"path/to/xmake.dic", '
                                             '"path/to/lua.dic" },\n'
                                             '\t\t\t\t-- },\n'
                                             '\t\t\t\t-- filepath = {\n'
                                             '\t\t\t\t-- \t["%.tmux.*%.conf"] '
                                             '= "path/to/tmux.dic",\n'
                                             '\t\t\t\t-- },\n'
                                             '\t\t\t},\n'
                                             '\t\t\t-- The following are '
                                             "default values, so you don't "
                                             "need to write them if you don't "
                                             'want to change them\n'
                                             '\t\t\t-- exact = 2,\n'
                                             '\t\t\t-- first_case_insensitive '
                                             '= false,\n'
                                             '\t\t\t-- document = false,\n'
                                             '\t\t\t-- document_command = "wn '
                                             '%s -over",\n'
                                             '\t\t\tasync = false,\n'
                                             '\t\t\t-- capacity = 5,\n'
                                             '\t\t\t-- debug = false,\n'
                                             '\t\t})\n'
                                             '\n'
                                             '\t\t\t},\n'
                                             '\n'
                                             '\t\t\t-- { '
                                             '"andweeb/presence.nvim" },\n'
                                             '\t\t\t-- {\n'
                                             '\t\t\t--   '
                                             '"ray-x/lsp_signature.nvim",\n'
                                             '\t\t\t--   event = "BufRead",\n'
                                             '\t\t\t--   config = function()\n'
                                             '\t\t\t--     '
                                             'require("lsp_signature").setup()\n'
                                             '\t\t\t--   end,\n'
                                             '\t\t\t-- },\n'
                                             '\t\t},\n'
                                             '\t\t-- All other entries '
                                             'override the setup() call for '
                                             'default plugins\n'
                                             '\t\ttreesitter = { '
                                             'ensure_installed = { "lua" } },\n'
                                             '\t\tpacker = {\n'
                                             '\t\t\tcompile_path = '
                                             'vim.fn.stdpath("config") .. '
                                             '"/lua/packer_compiled.lua",\n'
                                             '\t\t},\n'
                                             '\t},\n'
                                             '\n'
                                             '\t-- Add paths for including '
                                             'more VS Code style snippets in '
                                             'luasnip\n'
                                             '\tluasnip = {\n'
                                             '\t\tvscode_snippet_paths = {},\n'
                                             '\t},\n'
                                             '\n'
                                             '\t-- Modify which-key '
                                             'registration\n'
                                             '\t["which-key"] = {\n'
                                             '\t\t-- Add bindings to the '
                                             'normal mode <leader> mappings\n'
                                             '\t\t-- register_n_leader = '
                                             '{["N"] = {"<cmd>tabnew<cr>", '
                                             '"New Buffer"}}\n'
                                             '\t},\n'
                                             '\n'
                                             '\t-- Extend LSP configuration\n'
                                             '\tlsp = {\n'
                                             '\t\t-- add to the server '
                                             'on_attach function\n'
                                             '\t\t-- on_attach = '
                                             'function(client, bufnr)\n'
                                             '\t\t-- end,\n'
                                             '\n'
                                             '\t\t-- override the lsp '
                                             'installer server-registration '
                                             'function\n'
                                             '\t\t-- server_registration = '
                                             'function(server, opts)\n'
                                             '\t\t--   server:setup(opts)\n'
                                             '\t\t-- end\n'
                                             '\n'
                                             '\t\t-- Add overrides for LSP '
                                             'server settings, the keys are '
                                             'the name of the server\n'
                                             '\t\t["server-settings"] = {\n'
                                             '\t\t\t-- example for addings '
                                             'schemas to yamlls\n'
                                             '\t\t\t-- yamlls = {\n'
                                             '\t\t\t--   settings = {\n'
                                             '\t\t\t--     yaml = {\n'
                                             '\t\t\t--       schemas = {\n'
                                             '\t\t\t--         '
                                             '["http://json.schemastore.org/github-workflow"] '
                                             '= '
                                             '".github/workflows/*.{yml,yaml}",\n'
                                             '\t\t\t--         '
                                             '["http://json.schemastore.org/github-action"] '
                                             '= ".github/action.{yml,yaml}",\n'
                                             '\t\t\t--         '
                                             '["http://json.schemastore.org/ansible-stable-2.9"] '
                                             '= "roles/tasks/*.{yml,yaml}",\n'
                                             '\t\t\t--       },\n'
                                             '\t\t\t--     },\n'
                                             '\t\t\t--   },\n'
                                             '\t\t\t-- },\n'
                                             '\t\t},\n'
                                             '\t},\n'
                                             '\n'
                                             '\t-- Diagnostics configuration '
                                             '(for '
                                             'vim.diagnostics.config({}))\n'
                                             '\tdiagnostics = { virtual_text = '
                                             'true, underline = true },\n'
                                             '\n'
                                             '\t-- null-ls configuration\n'
                                             '\t["null-ls"] = function()\n'
                                             '\t\t-- Formatting and linting\n'
                                             '\t\t-- '
                                             'https://github.com/jose-elias-alvarez/null-ls.nvim\n'
                                             '\t\tlocal status_ok, null_ls = '
                                             'pcall(require, "null-ls")\n'
                                             '\t\tif not status_ok then\n'
                                             '\t\t\treturn\n'
                                             '\t\tend\n'
                                             '\n'
                                             '\t\t-- Check supported '
                                             'formatters\n'
                                             '\t\t-- '
                                             'https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting\n'
                                             '\n'
                                             '\t\t-- Check supported linters\n'
                                             '\t\t-- '
                                             'https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics\n'
                                             '\t\tlocal b = null_ls.builtins\n'
                                             '\t\tlocal txt = { filetypes = { '
                                             '"markdown", "text" } }\n'
                                             '\n'
                                             '\t\tnull_ls.setup({\n'
                                             '\t\t\tdebug = true,\n'
                                             '\t\t\tsources = {\n'
                                             '\t\t\t\t-- '
                                             'https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md\n'
                                             '\t\t\t\t'
                                             'b.code_actions.refactoring,\n'
                                             '\t\t\t\t'
                                             'b.code_actions.shellcheck,\n'
                                             '\t\t\t\tb.completion.luasnip,\n'
                                             '\t\t\t\t'
                                             'b.completion.spell.with(txt),\n'
                                             '\t\t\t\t'
                                             'b.diagnostics.misspell.with(txt),\n'
                                             '\t\t\t\t'
                                             'b.diagnostics.shellcheck,\n'
                                             '\t\t\t\t'
                                             'b.diagnostics.write_good,\n'
                                             '\t\t\t\t'
                                             'b.formatting.black.with({ '
                                             'extra_args = { "--fast" } }),\n'
                                             '\t\t\t\t'
                                             'b.formatting.prettier.with({ '
                                             'filetypes = { "html", "json", '
                                             '"yaml" } }),\n'
                                             '\t\t\t\tb.formatting.shfmt,\n'
                                             '\t\t\t\tb.formatting.stylua,\n'
                                             '\t\t\t\t'
                                             'b.hover.dictionary.with(txt), -- '
                                             'shift-k is hover\n'
                                             '\t\t\t},\n'
                                             '\t\t\t-- NOTE: You can remove '
                                             'this on attach function to '
                                             'disable format on save\n'
                                             '\t\t\ton_attach = '
                                             'function(client)\n'
                                             '\t\t\t\tif '
                                             'client.resolved_capabilities.document_formatting '
                                             'then\n'
                                             '\t\t\t\t\tvim.cmd("autocmd '
                                             'BufWritePre <buffer> lua '
                                             'vim.lsp.buf.formatting()")\n'
                                             '\t\t\t\tend\n'
                                             '\t\t\tend,\n'
                                             '\t\t})\n'
                                             '\tend,\n'
                                             '\tpolish = function()\n'
                                             '\t\tlocal opts = { noremap = '
                                             'true, silent = true }\n'
                                             '\t\tlocal map = '
                                             'vim.api.nvim_set_keymap\n'
                                             '\t\t-- Set options\n'
                                             '\t\tlocal set = vim.opt\n'
                                             '\t\t'
                                             'require("luasnip.loaders.from_snipmate").lazy_load()\n'
                                             '\t\t-- cmp.formatting.fields = '
                                             '{"kind"}\n'
                                             '\t\tU = require("user.utils") -- '
                                             'allows :lua U.dump(vim.lsp)\n'
                                             '\t\t'
                                             'require("luasnip.loaders.from_vscode").lazy_load()\n'
                                             '\n'
                                             '\t\tset.shiftwidth = 4 -- Number '
                                             'of space inserted for '
                                             'indentation\n'
                                             '\t\tset.tabstop = 4 -- Number of '
                                             'spaces in a tab\n'
                                             '\t\tset.foldmethod = "indent"\n'
                                             '\t\tset.foldlevel = 99 -- open '
                                             'all\n'
                                             '\t\tset.relativenumber = true\n'
                                             '\t\t--set.dict = '
                                             '"/usr/share/dict/words" -- much '
                                             'more\n'
                                             '\t\tset.dict = '
                                             '"~/.config/nvim.personal/10k.txt"\n'
                                             '\t\t-- map("n", "<C-s>", '
                                             '":w!<CR>", opts)\n'
                                             '\t\tvim.api.nvim_set_keymap(\n'
                                             '\t\t\t"v",\n'
                                             '\t\t\t"<leader>rr",\n'
                                             '\t\t\t"<Esc><cmd>lua '
                                             'require(\'telescope\').extensions.refactoring.refactors()<CR>",\n'
                                             '\t\t\t{ noremap = true }\n'
                                             '\t\t)\n'
                                             '\t\tmap("n", ",4", ":ToggleTerm '
                                             'size=100 <CR>", opts)\n'
                                             '\t\tmap("n", ",D", ":lua '
                                             'vim.diagnostic.config({virtual_text '
                                             '= false})<CR>", opts)\n'
                                             '\t\t-- all viml:\n'
                                             '\t\tvim.cmd("source '
                                             '$HOME/.config/nvim.personal/polish.vim")\n'
                                             '\t\t-- do this only here so that '
                                             'require mpack works for async:\n'
                                             '\tend,\n'
                                             '}\n'
                                             '\n'
                                             'return config\n'},
 '73c02eb6f6524b1bab84ccaa733260d2_': {'cmd': '$ cat '
                                              '/home/gk/.config/nvim.personal/polish.vim',
                                       'res': '" this is simply ctrl-i:\n'
                                              '"nnoremap <Tab>   za\n'
                                              'nnoremap <C-i>   za\n'
                                              '"cnoremap <silent> x<CR>  :call '
                                              'ConfirmQuit(1)<CR>\n'
                                              '"  "Yank constent with D and '
                                              'C:\n'
                                              'nnoremap Y         y$\n'
                                              'nnoremap ,l        '
                                              ':LazyGit<CR>\n'
                                              'nnoremap ,q        :q!<CR>\n'
                                              'nnoremap ,Q        :Q!<cr>\n'
                                              'nnoremap ,d        :wq!<CR>\n'
                                              'nnoremap ,w        :w<cr>\n'
                                              'nnoremap ,1        :source '
                                              '~/.config/nvim/init.lua<CR>\n'
                                              'nnoremap ,2        :edit '
                                              '~/.config/nvim/lua/user/init.lua<CR>\n'
                                              'nnoremap ,c        :close<CR> " '
                                              'close just a split or a tab\n'
                                              'nmap     ,f        za "folds\n'
                                              '\n'
                                              '\n'
                                              'nnoremap <silent> ,3  '
                                              ':FloatermNew! --autoclose=2 '
                                              '--wintype=vsplit cd %:p:h<CR>\n'
                                              '\n'
                                              '"" Line join better, position '
                                              'cursor at join point:\n'
                                              '" (J is 5 lines jumps)\n'
                                              'nnoremap gj '
                                              '$mx<cmd>join<CR>0$[`dmx\n'
                                              '\n'
                                              '" Universal python scriptable '
                                              'file or browser opener over '
                                              'word:\n'
                                              '"nmap ,g viW"ay:lua '
                                              "require('utils').smart_open([[<C-R>a]])<CR><CR>\n"
                                              'nmap ,g viW"ay:lua '
                                              "require('user.utils').smart_open([[<C-R>a]])<CR>\n"
                                              'vmap ,g :lua '
                                              "require('user.utils').smart_open([[visualsel]])<CR><CR>\n"
                                              '\n'
                                              '" tabularize:\n'
                                              'nmap ga   :Tabularize/\n'
                                              'xmap ga   :Tabularize/\n'
                                              'nmap tt  '
                                              'vip:s:,,:\\|:ge<CR>vip:Tabularize/\\|<CR>\n'
                                              '" markdown table\n'
                                              'nnoremap ,ta       '
                                              'vip:s/$/\\|/ge<CR>vip:s:,,:\\|:ge<CR>vip:s:^:\\|:ge<CR>vip:s:\\|\\|:\\|:ge<CR>vip:Tabularize/\\|<CR> \n'
                                              '\n'
                                              'nnoremap S '
                                              ':%s//gI<Left><Left><Left>\n'
                                              '" move between splits with '
                                              'alt-jk\n'
                                              'nnoremap <M-j> <C-W><C-W>\n'
                                              'nnoremap <M-k> <C-W><C-W>\n'
                                              'inoremap <M-j> <ESC><C-W><C-W>\n'
                                              'inoremap <M-k> <ESC><C-W><C-W>\n'
                                              'nnoremap <C-L> <C-W><C-J>\n'
                                              'nnoremap <C-H> <C-W><C-K>\n'
                                              '" we often have old stuff at '
                                              'end of files:\n'
                                              'nnoremap  G      '
                                              'G?begin_archive<CR>\n'
                                              '\n'
                                              '\n'
                                              'nmap <silent> <Leader><Leader> '
                                              '<Leader>ff\n'
                                              'nnoremap <silent> <Leader>j  '
                                              ':Telescope buffers<cr>\n'
                                              'nnoremap <silent> <Leader>g  '
                                              ':Telescope live_grep<cr>\n'
                                              '\n'
                                              '\n'
                                              '" go to the position I was when '
                                              'last editing the file\n'
                                              'au BufReadPost * if '
                                              'line("\'\\"") > 0 && '
                                              'line("\'\\"") <= line("$") | '
                                              'exe "normal g\'\\"" | endif\n'
                                              '\n'
                                              '"colorscheme '
                                              'pinkmare"colorscheme kanagawa\n'
                                              '\n'
                                              '"" AutoSave\n'
                                              'nmap ,s  :AutoSave<CR>\n'
                                              'function! s:autosave(enable)\n'
                                              '  augroup autosave\n'
                                              '    autocmd!\n'
                                              '    " at $IDE we call this at '
                                              'ANY BufEnter, with enable=2\n'
                                              '    if a:enable == 2\n'
                                              "        if $IDE != 'true'\n"
                                              '            return\n'
                                              '        endif\n'
                                              '    endif\n'
                                              '    if a:enable\n'
                                              '      autocmd '
                                              'TextChanged,InsertLeave '
                                              '<buffer>\n'
                                              '            \\  if '
                                              'empty(&buftype) && '
                                              "!empty(bufname(''))\n"
                                              '            \\|   silent! '
                                              'update\n'
                                              '            \\| endif\n'
                                              '    endif\n'
                                              '  augroup END\n'
                                              'endfunction\n'
                                              'command! -bang AutoSave call '
                                              's:autosave(<bang>1)\n'
                                              'autocmd BufEnter *.* :call '
                                              's:autosave(2) " $IDE -> always\n'
                                              '\n'
                                              '"" Yank hilite\n'
                                              'augroup highlight_yank\n'
                                              '    autocmd!\n'
                                              '    au TextYankPost * silent! '
                                              'lua '
                                              'vim.highlight.on_yank({higroup="IncSearch", '
                                              'timeout=400})\n'
                                              'augroup END\n'
                                              '\n'
                                              '"" Packer\n'
                                              'augroup packer_conf\n'
                                              '  autocmd!\n'
                                              '  autocmd BufWritePost '
                                              'plugins.lua source <afile> | '
                                              'PackerSync\n'
                                              'augroup end\n'
                                              '\n'
                                              '\n'}}