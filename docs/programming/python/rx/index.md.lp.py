{'1fe2d96bbb24a005f57dbc0281ae61c2': [{'cmd': 'for p in rx gevent flask; do '
                                              'pip show $p || pip install $p; '
                                              'done',
                                       'res': '$ for p in rx gevent flask; do '
                                              'pip show $p || pip install $p; '
                                              'done\n'
                                              'Name: Rx\n'
                                              'Version: 3.2.0\n'
                                              'Summary: Reactive Extensions '
                                              '(Rx) for Python\n'
                                              'Home-page: http://reactivex.io\n'
                                              'Author: Dag Brattli\n'
                                              'Author-email: dag@brattli.net\n'
                                              'License: MIT License\n'
                                              'Location: '
                                              '/home/gk/miniconda3/envs/blog_py3.9/lib/python3.9/site-packages\n'
                                              'Requires: \n'
                                              'Required-by: \n'
                                              'Name: gevent\n'
                                              'Version: 21.12.0\n'
                                              'Summary: Coroutine-based '
                                              'network library\n'
                                              'Home-page: '
                                              'http://www.gevent.org/\n'
                                              'Author: Denis Bilenko\n'
                                              'Author-email: '
                                              'denis.bilenko@gmail.com\n'
                                              'License: MIT\n'
                                              'Location: '
                                              '/home/gk/miniconda3/envs/blog_py3.9/lib/python3.9/site-packages\n'
                                              'Requires: greenlet, setuptools, '
                                              'zope.event, zope.interface\n'
                                              'Required-by: \n'
                                              'Name: Flask\n'
                                              'Version: 2.0.3\n'
                                              'Summary: A simple framework for '
                                              'building complex web '
                                              'applications.\n'
                                              'Home-page: '
                                              'https://palletsprojects.com/p/flask\n'
                                              'Author: Armin Ronacher\n'
                                              'Author-email: '
                                              'armin.ronacher@active-4.com\n'
                                              'License: BSD-3-Clause\n'
                                              'Location: '
                                              '/home/gk/miniconda3/envs/blog_py3.9/lib/python3.9/site-packages\n'
                                              'Requires: click, itsdangerous, '
                                              'Jinja2, Werkzeug\n'
                                              'Required-by:'}],
 '344fd121704d5dce8bb543248f0febd5': [{'cmd': 'python tests/rx/tools.py',
                                       'res': '$ python tests/rx/tools.py\n'
                                              '\x1b[0;38;5;245m    4\x1b[0m  M '
                                              '\x1b[31m[S] msg 1\x1b[0m\n'
                                              '\x1b[0;38;5;245m   55\x1b[0m  M '
                                              '\x1b[33m[2] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m   55\x1b[0m  M '
                                              '\x1b[34m[3] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m   55\x1b[0m  M '
                                              '\x1b[31m[S] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  105\x1b[0m  M '
                                              '\x1b[35m[4] msg 3\x1b[0m'},
                                      {'cmd': 'python tests/rx/tools.py '
                                              'patched',
                                       'res': '$ python tests/rx/tools.py '
                                              'patched\n'
                                              '\x1b[0;38;5;245m  203\x1b[0m  M '
                                              '\x1b[31m[S] msg 1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  254\x1b[0m  1 '
                                              '\x1b[33m[2] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  254\x1b[0m  2 '
                                              '\x1b[34m[3] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  254\x1b[0m  3 '
                                              '\x1b[31m[S] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  304\x1b[0m  M '
                                              '\x1b[35m[4] msg 3\x1b[0m'}],
 '6d9bd4e903932ff33bd8de1cdcfadc31': [{'cmd': 'pytest -xs '
                                              'tests/rx/test_async_server.py '
                                              '-k one 2>/dev/null',
                                       'res': '$ pytest -xs '
                                              'tests/rx/test_async_server.py '
                                              '-k one 2>/dev/null\n'
                                              '============================= '
                                              'test session starts '
                                              '==============================\n'
                                              'platform linux -- Python '
                                              '3.9.10, pytest-6.2.5, '
                                              'py-1.11.0, pluggy-1.0.0\n'
                                              'Using '
                                              '--randomly-seed=1034664708\n'
                                              'rootdir: /home/gk/repos\n'
                                              'plugins: forked-1.4.0, '
                                              'randomly-3.10.3, cov-2.12.1, '
                                              'xdist-2.5.0, sugar-0.9.4\n'
                                              'collected 2 items / 1 '
                                              'deselected / 1 selected\n'
                                              '\n'
                                              'tests/rx/test_async_server.py '
                                              '\x1b[0;38;5;245m   80\x1b[0m  M '
                                              '\x1b[31m[S] starting processing '
                                              'pipelines for jobs and '
                                              'incomming data\x1b[0m\n'
                                              '\x1b[0;38;5;245m   82\x1b[0m  M '
                                              '\x1b[31m[S] \x1b[0m\n'
                                              '\x1b[0;38;5;245m   82\x1b[0m  1 '
                                              '\x1b[31m[S] \x1b[0m\n'
                                              '\x1b[0;38;5;245m   82\x1b[0m  1 '
                                              '\x1b[31m[S] starting server at '
                                              '50000\x1b[0m\n'
                                              '\x1b[0;38;5;245m  115\x1b[0m  2 '
                                              '\x1b[32m[1] Sending job\x1b[0m\n'
                                              '\x1b[0;38;5;245m  118\x1b[0m  3 '
                                              '\x1b[33m[2] Sending job\x1b[0m\n'
                                              '\x1b[0;38;5;245m  120\x1b[0m  4 '
                                              '\x1b[31m[S] running job '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  129\x1b[0m  5 '
                                              '\x1b[34m[3] Sending job\x1b[0m\n'
                                              '\x1b[0;38;5;245m  321\x1b[0m  4 '
                                              '\x1b[31m[S] got result part 0 '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  322\x1b[0m  3 '
                                              "\x1b[33m[2] got chunk {'res': "
                                              "'job2 result 0', 'nr': 0, 'dt': "
                                              '201}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  521\x1b[0m  4 '
                                              '\x1b[31m[S] got result part 1 '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  522\x1b[0m  3 '
                                              "\x1b[33m[2] got chunk {'res': "
                                              "'job2 result 1', 'nr': 1, 'dt': "
                                              '401}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  722\x1b[0m  4 '
                                              '\x1b[31m[S] got result part 2 '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  723\x1b[0m  3 '
                                              "\x1b[33m[2] got chunk {'res': "
                                              "'job2 result 2', 'nr': 2, 'dt': "
                                              '602}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  924\x1b[0m  6 '
                                              '\x1b[31m[S] closing request '
                                              'socket\x1b[0m\n'
                                              '\x1b[0;38;5;245m  926\x1b[0m  7 '
                                              '\x1b[31m[S] running job '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  927\x1b[0m  3 '
                                              '\x1b[33m[2] done client\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1027\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 0 '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1031\x1b[0m  2 '
                                              "\x1b[32m[1] got chunk {'res': "
                                              "'job1 result 0', 'nr': 0, 'dt': "
                                              '907}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1129\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 1 '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1131\x1b[0m  2 '
                                              "\x1b[32m[1] got chunk {'res': "
                                              "'job1 result 1', 'nr': 1, 'dt': "
                                              '1009}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1230\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 2 '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1231\x1b[0m  2 '
                                              "\x1b[32m[1] got chunk {'res': "
                                              "'job1 result 2', 'nr': 2, 'dt': "
                                              '1110}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1331\x1b[0m  7 '
                                              '\x1b[31m[S] running job '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1331\x1b[0m  8 '
                                              '\x1b[31m[S] closing request '
                                              'socket\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1332\x1b[0m  2 '
                                              '\x1b[32m[1] done client\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1632\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 0 '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1635\x1b[0m  5 '
                                              "\x1b[34m[3] got chunk {'res': "
                                              "'job3 result 0', 'nr': 0, 'dt': "
                                              '1502}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1933\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 1 '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1934\x1b[0m  5 '
                                              "\x1b[34m[3] got chunk {'res': "
                                              "'job3 result 1', 'nr': 1, 'dt': "
                                              '1803}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 2234\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 2 '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m 2235\x1b[0m  5 '
                                              "\x1b[34m[3] got chunk {'res': "
                                              "'job3 result 2', 'nr': 2, 'dt': "
                                              '2104}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 2536\x1b[0m  9 '
                                              '\x1b[31m[S] closing request '
                                              'socket\x1b[0m\n'
                                              '\x1b[0;38;5;245m 2536\x1b[0m  5 '
                                              '\x1b[34m[3] done client\x1b[0m\n'
                                              '\x1b[0;38;5;245m 2650\x1b[0m  M '
                                              '\x1b[34m[3] all_done\x1b[0m\n'
                                              '.\n'
                                              '\n'
                                              '======================= 1 '
                                              'passed, 1 deselected in 2.80s '
                                              '========================'}],
 '73c02eb6f6524b1bab84ccaa733260d2': {'cmd': '$ cat tests/rx/tools.py',
                                      'res': 'import time\n'
                                             'import sys\n'
                                             'from threading import '
                                             'current_thread\n'
                                             'import gevent\n'
                                             '\n'
                                             '\n'
                                             'now = lambda: int(time.time() * '
                                             '1000)\n'
                                             't0 = now()\n'
                                             'dt = lambda: now() - t0\n'
                                             'thread = lambda: '
                                             "current_thread().name.replace('Dummy-', "
                                             "'').replace('MainThread', 'M')\n"
                                             'gray = '
                                             "'\\x1b[0;38;5;245m%s\\x1b[0m'\n"
                                             '\n'
                                             '\n'
                                             'def print(*a, p=print, who=0, '
                                             '**kw):\n'
                                             "    pre = '%s %2s ' % (gray % "
                                             "('%5s' % dt()), thread())\n"
                                             "    msg = ' '.join([str(i) for i "
                                             'in a])\n'
                                             "    msg = '\\x1b[3%sm[%s] "
                                             "%s\\x1b[0m' % (who + 1, who or "
                                             "'S', msg)\n"
                                             '    p(pre + msg, **kw)\n'
                                             '    return a[0]\n'
                                             '\n'
                                             '\n'
                                             '#  --------------------   quick '
                                             'test follows '
                                             '-------------------------------------------\n'
                                             "if __name__ == '__main__':\n"
                                             '    from gevent import monkey\n'
                                             '\n'
                                             '    sleep, asyn = gevent.sleep, '
                                             'gevent.spawn\n'
                                             '    if sys.argv[-1] == '
                                             "'patched':\n"
                                             '        monkey.patch_all()\n'
                                             '        assert time.sleep == '
                                             'gevent.sleep  # since patched\n'
                                             "    print('msg 1')\n"
                                             '\n'
                                             '    def f(who):\n'
                                             '        sleep(0.05)\n'
                                             "        print('async msg', "
                                             'who=who)\n'
                                             '\n'
                                             '    asyn(f, 2)\n'
                                             '    asyn(f, 3)\n'
                                             '    asyn(f, 0)\n'
                                             '\n'
                                             '    sleep(0.1)\n'
                                             "    print('msg 3', who=4)\n"},
 '73c02eb6f6524b1bab84ccaa733260d2_': {'cmd': '$ cat tests/rx/server.py',
                                       'res': '#!/usr/bin/env python\n'
                                              'import json\n'
                                              'import sys\n'
                                              'import time\n'
                                              'from functools import partial\n'
                                              '\n'
                                              'import gevent\n'
                                              'import gevent.queue\n'
                                              'import rx as Rx\n'
                                              'from flask import Flask, '
                                              'stream_with_context\n'
                                              'from gevent import monkey\n'
                                              'from gevent.pywsgi import '
                                              'WSGIServer\n'
                                              'from rx import operators as rx\n'
                                              'from rx.scheduler.eventloop '
                                              'import GEventScheduler as GS\n'
                                              'from tools import gevent, now, '
                                              'print\n'
                                              'from werkzeug.debug import '
                                              'DebuggedApplication\n'
                                              'from werkzeug.serving import '
                                              'run_with_reloader\n'
                                              '\n'
                                              "sys.path.append(__file__.rsplit('/', "
                                              '1)[0])\n'
                                              '\n'
                                              '\n'
                                              'monkey.patch_all()\n'
                                              'app = Flask(__name__)\n'
                                              'GS = GS(gevent)\n'
                                              'jobs = Rx.subject.Subject()\n'
                                              'results = Rx.subject.Subject()\n'
                                              'flush_response = lambda q: '
                                              'q.put(StopIteration)  # closing '
                                              'the socket\n'
                                              'wait = lambda dt: time.sleep(dt '
                                              '/ 1000.0)\n'
                                              'asyn = lambda: rx.delay(0, GS)\n'
                                              '\n'
                                              '\n'
                                              'class J:\n'
                                              '    """Job Running Pipeline '
                                              'Functions"""\n'
                                              '\n'
                                              '    def _run_job(job):\n'
                                              '        """syncronous job '
                                              'running"""\n'
                                              '        # how is the job '
                                              '(transport, behaviour, ...):\n'
                                              '        _, job = '
                                              "job['meta'].pop, job['job']\n"
                                              '        parts, dt, q, ts = '
                                              "_('parts'), _('dt'), _('req'), "
                                              "_('ts')\n"
                                              "        print('running job', "
                                              'job)\n'
                                              '        for c in range(parts):\n'
                                              '            wait(dt)\n'
                                              "            print('got result "
                                              "part', c, job)\n"
                                              '            res = {\n'
                                              "                'res': '%s "
                                              "result %s' % (job, c),\n"
                                              "                'nr': c,\n"
                                              "                'dt': now() - "
                                              'ts,\n'
                                              "                'req': q,\n"
                                              '            }\n'
                                              '            '
                                              'results.on_next(res)\n'
                                              '        # Closing the req '
                                              'socket after all parts are '
                                              'there. Normally elsewhere, we '
                                              'do\n'
                                              '        # not know that '
                                              "normally or 'all there' is "
                                              'never.\n'
                                              '        # But that can be done '
                                              'from anywhere - e.g. at cancel '
                                              'from the client\n'
                                              '        # or when his socket '
                                              'closes:\n'
                                              '        wait(dt)\n'
                                              '        flush_response(q)\n'
                                              '\n'
                                              '    run_job = rx.map(_run_job)\n'
                                              '\n'
                                              '\n'
                                              'class R:\n'
                                              '    """Results Handling '
                                              'Functions"""\n'
                                              '\n'
                                              '    def '
                                              'interested_clients(res):\n'
                                              '        """Work via a central '
                                              'registry of clients who want '
                                              'job results"""\n'
                                              '        # here we just added '
                                              '"them" directly into the '
                                              'result:\n'
                                              '        return '
                                              "[res.pop('req')]\n"
                                              '\n'
                                              '    def _send_response(res):\n'
                                              '        clients = '
                                              'R.interested_clients(res)\n'
                                              '        ser = json.dumps(res) + '
                                              "'\\r\\n'\n"
                                              '        [c.put(ser) for c in '
                                              'clients]\n'
                                              '        return res\n'
                                              '\n'
                                              '    send_response = '
                                              'rx.map(_send_response)\n'
                                              '\n'
                                              '\n'
                                              'def new_job(job, meta):\n'
                                              '    """Production decoupled '
                                              'from repsonse sending"""\n'
                                              "    jobs.on_next({'job': job, "
                                              "'meta': meta})\n"
                                              '\n'
                                              '\n'
                                              "@app.route('/<job>/<int:parts>/<int:dt>')\n"
                                              'def index(job, parts, dt):\n'
                                              '    """\n'
                                              '    The request handling '
                                              'greenlet.\n'
                                              '\n'
                                              '    The client can parametrize '
                                              'how many data parts the job '
                                              'result should have - and\n'
                                              "    when they 'arrive'.\n"
                                              '\n'
                                              '    Creates a queue which, when '
                                              'seing an item, will cause a '
                                              'chunk response\n'
                                              '    """\n'
                                              '    # eventhandlers can produce '
                                              "here and we'll send to the "
                                              'client:\n'
                                              '    q = gevent.queue.Queue()\n'
                                              '\n'
                                              '    def generate():\n'
                                              '        for data in q:\n'
                                              '            yield data\n'
                                              "        print('closing request "
                                              "socket')\n"
                                              '\n'
                                              "    meta = {'parts': parts, "
                                              "'dt': dt, 'req': q, 'ts': "
                                              'now()}\n'
                                              '    new_job(job, meta)\n'
                                              "    _ = 'application/json'\n"
                                              '    return '
                                              'app.response_class(stream_with_context(generate()), '
                                              'mimetype=_)\n'
                                              '\n'
                                              '\n'
                                              '# '
                                              '------------------------------------------------------------------------------- '
                                              'server\n'
                                              'def '
                                              'reconfigure_server_pipelines(pipelines, '
                                              'subs=[0, 0]):\n'
                                              "    print('starting processing "
                                              'pipelines for jobs and '
                                              "incomming data')\n"
                                              '    if subs[0]:\n'
                                              "        print('stopping old "
                                              "pipeline')\n"
                                              '        [s.dispose() for s in '
                                              'subs]\n'
                                              '\n'
                                              '    for i in [0, 1]:\n'
                                              '        s = [jobs, '
                                              'results][i].pipe(asyn(), '
                                              '*pipelines[i])\n'
                                              '        subs[i] = '
                                              's.subscribe()\n'
                                              '    return True\n'
                                              '\n'
                                              '\n'
                                              'def run_server():\n'
                                              "    print('')\n"
                                              "    print('starting server at "
                                              "50000')\n"
                                              '    http_server = '
                                              "WSGIServer(('', 50000), "
                                              'DebuggedApplication(app))\n'
                                              '    '
                                              'http_server.serve_forever()\n'},
 '73c02eb6f6524b1bab84ccaa733260d2__': {'cmd': '$ cat '
                                               'tests/rx/test_async_server.py',
                                        'res': 'import json\n'
                                               'import os\n'
                                               'import sys\n'
                                               'import time\n'
                                               'from functools import partial\n'
                                               '\n'
                                               'from server import J, R, Rx, '
                                               'asyn, '
                                               'reconfigure_server_pipelines, '
                                               'run_server, rx, wait\n'
                                               'from tools import gevent, '
                                               'print\n'
                                               '\n'
                                               "sys.path.append(__file__.rsplit('/', "
                                               '1)[0])  # noqa\n'
                                               'gevent.spawn(run_server)\n'
                                               '\n'
                                               'done_clients = []\n'
                                               '\n'
                                               '\n'
                                               'def test_server_one():\n'
                                               '    """Keeping order but '
                                               'processing jobs (and '
                                               'responses) one after the '
                                               'other"""\n'
                                               '    p = [[J.run_job], '
                                               '[R.send_response]]\n'
                                               '    '
                                               'reconfigure_server_pipelines(p) '
                                               'and send_requests()\n'
                                               '\n'
                                               '\n'
                                               'def test_server_two():\n'
                                               '    """Here we run the jobs '
                                               'within parallel greenlets"""\n'
                                               '    p = [\n'
                                               '        [rx.flat_map(lambda '
                                               'job: Rx.just(job).pipe(asyn(), '
                                               'J.run_job)),],\n'
                                               '        [R.send_response],\n'
                                               '    ]\n'
                                               '    '
                                               'reconfigure_server_pipelines(p) '
                                               'and send_requests()\n'
                                               '\n'
                                               '\n'
                                               '# '
                                               '------------------------------------------------------------------------------- '
                                               'Tools\n'
                                               'def send_requests():\n'
                                               '    """sending 3 requests in '
                                               'parallel, simulating 3 '
                                               'clients"""\n'
                                               '    # yes we can reconfigure '
                                               'the pipeline while running;\n'
                                               '    done_clients.clear()\n'
                                               "    print('')\n"
                                               '    for client in 1, 2, 3:\n'
                                               '        s = '
                                               'partial(send_job_req_to_api_server, '
                                               'client=client)\n'
                                               '        gevent.spawn(s)\n'
                                               '        wait(10)\n'
                                               '    while not '
                                               'len(done_clients) == 3:\n'
                                               '        time.sleep(0.1)\n'
                                               '    time.sleep(0.1)\n'
                                               "    print('all_done', "
                                               'who=client)\n'
                                               '\n'
                                               '\n'
                                               'def '
                                               'send_job_req_to_api_server(client):\n'
                                               '    from requests import get\n'
                                               '\n'
                                               "    print('Sending job', "
                                               'who=client)\n'
                                               '    j, url = json.loads, '
                                               "'http://127.0.0.1:50000/job%s/3/%s'\n"
                                               '    chunks = get(url % '
                                               '(client, 100 * client), '
                                               'stream=True)\n'
                                               "    [print('got chunk', j(r), "
                                               'who=client) for r in '
                                               'chunks.iter_lines()]\n'
                                               "    print('done client', "
                                               'who=client)\n'
                                               '    '
                                               'done_clients.append(client)\n'},
 '919b84a7ec178a1ca50a15fa091db2d1': [{'cmd': 'pytest -xs '
                                              'tests/rx/test_async_server.py '
                                              '-k two 2>/dev/null',
                                       'res': '$ pytest -xs '
                                              'tests/rx/test_async_server.py '
                                              '-k two 2>/dev/null\n'
                                              '============================= '
                                              'test session starts '
                                              '==============================\n'
                                              'platform linux -- Python '
                                              '3.9.10, pytest-6.2.5, '
                                              'py-1.11.0, pluggy-1.0.0\n'
                                              'Using '
                                              '--randomly-seed=2731910505\n'
                                              'rootdir: /home/gk/repos\n'
                                              'plugins: forked-1.4.0, '
                                              'randomly-3.10.3, cov-2.12.1, '
                                              'xdist-2.5.0, sugar-0.9.4\n'
                                              'collected 2 items / 1 '
                                              'deselected / 1 selected\n'
                                              '\n'
                                              'tests/rx/test_async_server.py '
                                              '\x1b[0;38;5;245m   81\x1b[0m  M '
                                              '\x1b[31m[S] starting processing '
                                              'pipelines for jobs and '
                                              'incomming data\x1b[0m\n'
                                              '\x1b[0;38;5;245m   83\x1b[0m  M '
                                              '\x1b[31m[S] \x1b[0m\n'
                                              '\x1b[0;38;5;245m   83\x1b[0m  1 '
                                              '\x1b[31m[S] \x1b[0m\n'
                                              '\x1b[0;38;5;245m   83\x1b[0m  1 '
                                              '\x1b[31m[S] starting server at '
                                              '50000\x1b[0m\n'
                                              '\x1b[0;38;5;245m  117\x1b[0m  2 '
                                              '\x1b[32m[1] Sending job\x1b[0m\n'
                                              '\x1b[0;38;5;245m  119\x1b[0m  3 '
                                              '\x1b[33m[2] Sending job\x1b[0m\n'
                                              '\x1b[0;38;5;245m  122\x1b[0m  5 '
                                              '\x1b[31m[S] running job '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  123\x1b[0m  7 '
                                              '\x1b[31m[S] running job '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  130\x1b[0m  8 '
                                              '\x1b[34m[3] Sending job\x1b[0m\n'
                                              '\x1b[0;38;5;245m  137\x1b[0m 10 '
                                              '\x1b[31m[S] running job '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m  222\x1b[0m  5 '
                                              '\x1b[31m[S] got result part 0 '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  224\x1b[0m  2 '
                                              "\x1b[32m[1] got chunk {'res': "
                                              "'job1 result 0', 'nr': 0, 'dt': "
                                              '101}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  323\x1b[0m  5 '
                                              '\x1b[31m[S] got result part 1 '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  323\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 0 '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  324\x1b[0m  2 '
                                              "\x1b[32m[1] got chunk {'res': "
                                              "'job1 result 1', 'nr': 1, 'dt': "
                                              '202}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  324\x1b[0m  3 '
                                              "\x1b[33m[2] got chunk {'res': "
                                              "'job2 result 0', 'nr': 0, 'dt': "
                                              '201}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  424\x1b[0m  5 '
                                              '\x1b[31m[S] got result part 2 '
                                              'job1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  425\x1b[0m  2 '
                                              "\x1b[32m[1] got chunk {'res': "
                                              "'job1 result 2', 'nr': 2, 'dt': "
                                              '303}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  438\x1b[0m 10 '
                                              '\x1b[31m[S] got result part 0 '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m  441\x1b[0m  8 '
                                              "\x1b[34m[3] got chunk {'res': "
                                              "'job3 result 0', 'nr': 0, 'dt': "
                                              '303}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  524\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 1 '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  525\x1b[0m  3 '
                                              "\x1b[33m[2] got chunk {'res': "
                                              "'job2 result 1', 'nr': 1, 'dt': "
                                              '402}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  525\x1b[0m 11 '
                                              '\x1b[31m[S] closing request '
                                              'socket\x1b[0m\n'
                                              '\x1b[0;38;5;245m  526\x1b[0m  2 '
                                              '\x1b[32m[1] done client\x1b[0m\n'
                                              '\x1b[0;38;5;245m  725\x1b[0m  7 '
                                              '\x1b[31m[S] got result part 2 '
                                              'job2\x1b[0m\n'
                                              '\x1b[0;38;5;245m  727\x1b[0m  3 '
                                              "\x1b[33m[2] got chunk {'res': "
                                              "'job2 result 2', 'nr': 2, 'dt': "
                                              '604}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  739\x1b[0m 10 '
                                              '\x1b[31m[S] got result part 1 '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m  740\x1b[0m  8 '
                                              "\x1b[34m[3] got chunk {'res': "
                                              "'job3 result 1', 'nr': 1, 'dt': "
                                              '604}\x1b[0m\n'
                                              '\x1b[0;38;5;245m  928\x1b[0m 12 '
                                              '\x1b[31m[S] closing request '
                                              'socket\x1b[0m\n'
                                              '\x1b[0;38;5;245m  929\x1b[0m  3 '
                                              '\x1b[33m[2] done client\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1041\x1b[0m 10 '
                                              '\x1b[31m[S] got result part 2 '
                                              'job3\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1042\x1b[0m  8 '
                                              "\x1b[34m[3] got chunk {'res': "
                                              "'job3 result 2', 'nr': 2, 'dt': "
                                              '906}\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1342\x1b[0m 13 '
                                              '\x1b[31m[S] closing request '
                                              'socket\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1342\x1b[0m  8 '
                                              '\x1b[34m[3] done client\x1b[0m\n'
                                              '\x1b[0;38;5;245m 1447\x1b[0m  M '
                                              '\x1b[34m[3] all_done\x1b[0m\n'
                                              '.\n'
                                              '\n'
                                              '======================= 1 '
                                              'passed, 1 deselected in 1.57s '
                                              '========================'}]}