{'1fe2d96bbb24a005f57dbc0281ae61c2': [{'cmd': 'for p in rx gevent flask; do '
                                              'pip show $p || pip install $p; '
                                              'done',
                                       'res': '$ for p in rx gevent flask; do '
                                              'pip show $p || pip install $p; '
                                              'done\n'
                                              'Name: Rx\n'
                                              'Version: 3.2.0\n'
                                              'Summary: Reactive Extensions '
                                              '(Rx) for Python\n'
                                              'Home-page: http://reactivex.io\n'
                                              'Author: Dag Brattli\n'
                                              'Author-email: dag@brattli.net\n'
                                              'License: MIT License\n'
                                              'Location: '
                                              '/home/gk/miniconda3/envs/blog_py3.9/lib/python3.9/site-packages\n'
                                              'Requires: \n'
                                              'Required-by: \n'
                                              'Name: gevent\n'
                                              'Version: 21.12.0\n'
                                              'Summary: Coroutine-based '
                                              'network library\n'
                                              'Home-page: '
                                              'http://www.gevent.org/\n'
                                              'Author: Denis Bilenko\n'
                                              'Author-email: '
                                              'denis.bilenko@gmail.com\n'
                                              'License: MIT\n'
                                              'Location: '
                                              '/home/gk/miniconda3/envs/blog_py3.9/lib/python3.9/site-packages\n'
                                              'Requires: greenlet, setuptools, '
                                              'zope.event, zope.interface\n'
                                              'Required-by: \n'
                                              'Name: Flask\n'
                                              'Version: 2.0.3\n'
                                              'Summary: A simple framework for '
                                              'building complex web '
                                              'applications.\n'
                                              'Home-page: '
                                              'https://palletsprojects.com/p/flask\n'
                                              'Author: Armin Ronacher\n'
                                              'Author-email: '
                                              'armin.ronacher@active-4.com\n'
                                              'License: BSD-3-Clause\n'
                                              'Location: '
                                              '/home/gk/miniconda3/envs/blog_py3.9/lib/python3.9/site-packages\n'
                                              'Requires: click, itsdangerous, '
                                              'Jinja2, Werkzeug\n'
                                              'Required-by:'}],
 '344fd121704d5dce8bb543248f0febd5': [{'cmd': 'python tests/rx/tools.py',
                                       'res': '$ python tests/rx/tools.py\n'
                                              '\x1b[0;38;5;245m    4\x1b[0m  M '
                                              '\x1b[31m[♻️] msg 1\x1b[0m\n'
                                              '\x1b[0;38;5;245m   54\x1b[0m  M '
                                              '\x1b[33m[2] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m   54\x1b[0m  M '
                                              '\x1b[34m[3] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m   54\x1b[0m  M '
                                              '\x1b[31m[♻️] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  105\x1b[0m  M '
                                              '\x1b[35m[4] msg 3\x1b[0m'},
                                      {'cmd': 'python tests/rx/tools.py '
                                              'patched',
                                       'res': '$ python tests/rx/tools.py '
                                              'patched\n'
                                              '\x1b[0;38;5;245m  137\x1b[0m  M '
                                              '\x1b[31m[♻️] msg 1\x1b[0m\n'
                                              '\x1b[0;38;5;245m  187\x1b[0m  1 '
                                              '\x1b[33m[2] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  187\x1b[0m  2 '
                                              '\x1b[34m[3] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  187\x1b[0m  3 '
                                              '\x1b[31m[♻️] async msg\x1b[0m\n'
                                              '\x1b[0;38;5;245m  238\x1b[0m  M '
                                              '\x1b[35m[4] msg 3\x1b[0m'}],
 '73c02eb6f6524b1bab84ccaa733260d2': {'cmd': '$ cat tests/rx/tools.py',
                                      'res': 'import time\n'
                                             'import sys\n'
                                             'from threading import '
                                             'current_thread\n'
                                             'import gevent\n'
                                             '\n'
                                             '\n'
                                             'now = lambda: int(time.time() * '
                                             '1000)\n'
                                             't0 = now()\n'
                                             'dt = lambda: now() - t0\n'
                                             'thread = lambda: '
                                             "current_thread().name.replace('Dummy-', "
                                             "'').replace('MainThread', 'M')\n"
                                             'gray = '
                                             "'\\x1b[0;38;5;245m%s\\x1b[0m'\n"
                                             '\n'
                                             '\n'
                                             'def print(*a, p=print, who=0, '
                                             '**kw):\n'
                                             "    pre = '%s %2s ' % (gray % "
                                             "('%5s' % dt()), thread())\n"
                                             "    msg = ' '.join([str(i) for i "
                                             'in a])\n'
                                             "    msg = '\\x1b[3%sm[%s] "
                                             "%s\\x1b[0m' % (who + 1, who or "
                                             "'♻️', msg)\n"
                                             '    p(pre + msg, **kw)\n'
                                             '    return a[0]\n'
                                             '\n'
                                             '\n'
                                             '#  --------------------   quick '
                                             'test follows '
                                             '-------------------------------------------\n'
                                             "if __name__ == '__main__':\n"
                                             '    from gevent import monkey\n'
                                             '\n'
                                             '    sleep = gevent.sleep\n'
                                             '    if sys.argv[-1] == '
                                             "'patched':\n"
                                             '        monkey.patch_all()\n'
                                             '        assert time.sleep == '
                                             'gevent.sleep  # since patched\n'
                                             "    print('msg 1')\n"
                                             '\n'
                                             '    def f(who):\n'
                                             '        sleep(0.05)\n'
                                             "        print('async msg', "
                                             'who=who)\n'
                                             '\n'
                                             '    gevent.spawn(f, 2)\n'
                                             '    gevent.spawn(f, 3)\n'
                                             '\n'
                                             '    sleep(0.1)\n'
                                             "    print('msg 3', who=4)\n"}}